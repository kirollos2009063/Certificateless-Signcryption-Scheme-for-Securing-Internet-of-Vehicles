#include <omnetpp.h>
#include "KeyReqMsg.h"
#include "PrivANDPub.h"
#include "VehicleToServer.h"
#include "Feedback.h"
#include "MessagetobeEnc.h"

using namespace omnetpp;

class RSU : public cSimpleModule {
private:
    int moduleid;
    bool sentToDestination;
    int specificCarId;

protected:
    virtual void initialize() override;
    virtual void handleMessage(cMessage *msg) override;
};

Define_Module(RSU);

void RSU::initialize() {}

void RSU::handleMessage(cMessage *msg) {
    sentToDestination = false;
    static int counter=0;
    if (counter == 0) {
        KeyReqMsg *keyreqmsg = dynamic_cast<KeyReqMsg *>(msg);
        moduleid = keyreqmsg->getSenderModuleId();
        for (int i = 0; i < gateSize("OutPut"); ++i) {
            cModule *connectedModule = gate("OutPut", i)->getPathEndGate()->getOwnerModule();
            if (connectedModule && connectedModule->par("isKGC").boolValue()) {
                send(keyreqmsg, "OutPut", i);
                break;
            }
        }
    } else if (counter == 1) {
        PuB_privMsg *Pb_Pr_Msg = dynamic_cast<PuB_privMsg *>(msg);
        send(Pb_Pr_Msg, "OutPut", moduleid - 2);
    } else if (counter == 2) {
        VtoS *Pub_Pr = dynamic_cast<VtoS *>(msg);
        for (int i = 0; i < gateSize("OutPut"); ++i) {
            cModule *connectedModule = gate("OutPut", i)->getPathEndGate()->getOwnerModule();
            if (connectedModule && connectedModule->hasPar("isServer") && connectedModule->par("isServer").boolValue()) {
                send(Pub_Pr, "OutPut", i);
                EV << counter << endl;
            }
        }
    } else if (counter == 3) {
        Feedback *feedback = dynamic_cast<Feedback *>(msg);
        send(feedback, "OutPut", moduleid - 2);

    } else if (counter == 4) {
        MessageToBeEncr *EncMsg = dynamic_cast<MessageToBeEncr *>(msg);
        for (int i = 0; i < gateSize("OutPut"); ++i) {
            cModule *connectedModule = gate("OutPut", i)->getPathEndGate()->getOwnerModule();
            if (connectedModule && connectedModule->hasPar("isServer") && connectedModule->par("isServer").boolValue()) {
                send(EncMsg, "OutPut", i);
                EV << counter << endl;
            }
        }
    } else if (counter == 5) {
        MessageToBeEncr *EncMsg = dynamic_cast<MessageToBeEncr *>(msg);
        int specificCarId = EncMsg->DestID;

        for (int i = 0; i < gateSize("OutPut"); ++i) {
            cModule *connectedModule = gate("OutPut", i)->getPathEndGate()->getOwnerModule();
            if (connectedModule && connectedModule->getId() == specificCarId) {
                EV << "Module " << specificCarId << " is connected to RSU " << getName() << "." << endl;
                send(EncMsg, "OutPut", i);
                sentToDestination = true;
            }
        }

        if (sentToDestination==false) {
            EV << "Message not sent to destination. Forwarding to the next RSU." << endl;
            for (int i = 0; i < gateSize("OutPut"); ++i) {
                cModule *connectedModule = gate("OutPut", i)->getPathEndGate()->getOwnerModule();
                EV << "Module " << connectedModule->getFullName() << " isRsu parameter: " << connectedModule->par("isRSU") << endl;
                EV<<connectedModule->par("isRSU");
                if (connectedModule && connectedModule->hasPar("isRSU") && connectedModule->par("isRSU").boolValue()) {
                    counter++;
                    send(EncMsg, "OutPut", i);

                }
            }
         }

    }


   if(counter==6){

       MessageToBeEncr *EncMsg = dynamic_cast<MessageToBeEncr *>(msg);
               int specificCarId = EncMsg->DestID;

               for (int i = 0; i < gateSize("OutPut"); ++i) {
                   cModule *connectedModule = gate("OutPut", i)->getPathEndGate()->getOwnerModule();
                   EV<<connectedModule->getId()<<" "<<specificCarId<<endl;
                   if (connectedModule && connectedModule->getId() == specificCarId) {
                       EV << "Module " << specificCarId << " is connected to RSU " << getName() << "." << endl;
                       EV<<getName()<<endl;
                       send(EncMsg, "OutPut", i);
                       sentToDestination = true;

                   }
               }
           }
   counter++;

}
